<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Otago Study Group SYSKA</title>
    <link>/syskasnippets/categories/r/</link>
    <description>Recent content in R on Otago Study Group SYSKA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/syskasnippets/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Making it go faster</title>
      <link>/syskasnippets/2019/05/making-it-go-faster/</link>
      <pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/syskasnippets/2019/05/making-it-go-faster/</guid>
      <description>Recently I have been going through some old code that I needed to rerun. As part of doing so I was taking the opportunity to reimplement it with some new tricks that I have discovered since I wrote it ~2 years ago.
This particular script has many, many for loops which I now wanted to replace with purrr::map to make the code cleaner and easier to maintain.
As part of using purrr::map I wondered if I could also make the code go faster by parallelising the loop.</description>
    </item>
    
    <item>
      <title>RMarkdown</title>
      <link>/syskasnippets/2018/04/rmarkdown/</link>
      <pubDate>Fri, 13 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/syskasnippets/2018/04/rmarkdown/</guid>
      <description>This webpage gives some examples of a few of the cool additional things that can be done with relative ease when creating and Rmarkdown document.
https://holtzy.github.io/Pimp-my-rmd/</description>
    </item>
    
    <item>
      <title>usethis - project setup</title>
      <link>/syskasnippets/2018/02/usethis-project-setup/</link>
      <pubDate>Thu, 08 Feb 2018 12:10:31 -0700</pubDate>
      
      <guid>/syskasnippets/2018/02/usethis-project-setup/</guid>
      <description> One of the packages that was a highlight for me from rstudio::conf2018 was usethis.
This package forms part of the package building workflow but also general project workflows.
In a package development workflow some of the key functions are:
# creates a new dir and populates with a skeleton containing examples usethis::create_package(&amp;quot;/path/to/create/package&amp;quot;) # creates an R script in the R/ dir (don&amp;#39;t need to include the .R extension) usethis::use_r(&amp;quot;filename&amp;quot;) # series of license templates such as mit, gpl3, cc0 etc usethis::use_*_license_license(&amp;quot;name&amp;quot;) # initialises a testthat dir to put tests usethis::use_testthat() # creates a testfile usethis::use_test(&amp;quot;filename&amp;quot;) # creates a README file for your package usethis::use_readme_md() </description>
    </item>
    
    <item>
      <title>aRson threats and some best practices</title>
      <link>/syskasnippets/2017/12/arson-threats-and-some-best-practices/</link>
      <pubDate>Tue, 12 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/syskasnippets/2017/12/arson-threats-and-some-best-practices/</guid>
      <description>Recently on twitter - the source of most of these posts - Jenny Bryan (@JennyBryan) posted a link to her slides from her talk she gave in Auckland (http://bit.ly/jenny-nz). It inpsired threats of arson for people that use
setwd(&amp;quot;/absolute/path/to/file&amp;quot;)  (this was because it reduces portability and outside of you using it the chances of someone having the exact directory setup is basically 0%)
and
rm(list = ls())  (because it interferes with peoples sessions and doesn&amp;rsquo;t sort out other session issues such as packages already loaded)</description>
    </item>
    
    <item>
      <title>Parallel install of R packages</title>
      <link>/syskasnippets/2017/11/parallel-install-of-r-packages/</link>
      <pubDate>Mon, 20 Nov 2017 12:10:31 -0700</pubDate>
      
      <guid>/syskasnippets/2017/11/parallel-install-of-r-packages/</guid>
      <description>This came up in my twitter feed from Rbloggers and looks pretty useful as a set and forget type thing.
See https://www.r-bloggers.com/speeding-up-package-installation-2/ for the actual post
Basically, install.packages() uses the environment setting for Ncpus, which by default is set to 1.
The current setting can be found with
# the second argument returns 1 if Ncpus is not set, instead of NULL getOption(&amp;quot;Ncpus&amp;quot;, 1L) Ncpus can be set with this command before running install.</description>
    </item>
    
  </channel>
</rss>